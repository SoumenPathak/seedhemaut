#include <stdio.h>



#define MAX_FRAMES 3



// Function to find if a page exists in memory

int find(int page, int frames[], int n) {

    for (int i = 0; i < n; i++) {

        if (frames[i] == page) {

            return 1; // Page found

        }

    }

    return 0; // Page not found

}







// LRU (Least Recently Used) Page Replacement Algorithm

void LRU(int pages[], int n) {

    int frames[MAX_FRAMES];

    int pageFaults = 0;



    // Initialize all frames to -1, indicating no page loaded initially

    for (int i = 0; i < MAX_FRAMES; i++) {

        frames[i] = -1;

    }



    for (int i = 0; i < n; i++) {

        int page = pages[i];

        if (!find(page, frames, MAX_FRAMES)) {

            // Find the least recently used page (the one at index 0)

            int replaceIndex = 0;

            for (int j = 1; j < MAX_FRAMES; j++) {

                if (frames[j] < frames[replaceIndex]) {

                    replaceIndex = j;

                }

            }

            frames[replaceIndex] = page;

            pageFaults++;

        }

        printf("Page %d: ", page);

        for (int j = 0; j < MAX_FRAMES; j++) {

            printf("%d ", frames[j]);

        }

        printf("\n");

    }



    printf("Total Page Faults (LRU): %d\n", pageFaults);

}







int main() {

    int pages[] = {1, 3, 0, 3, 5, 6, 3};

    int n = sizeof(pages) / sizeof(pages[0]);



    



    printf("LRU Page Replacement Algorithm\n");

    LRU(pages, n);

    printf("\n");



    

    return 0;

}

