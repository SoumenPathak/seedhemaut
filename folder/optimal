#include <stdio.h>

#define MAX_FRAMES 3
int find(int page, int frames[], int n) {
    for (int i = 0; i < n; i++) {
        if (frames[i] == page) {
            return 1; // Page found
        }
    }
    return 0; // Page not found
}
void Optimal(int pages[], int n) {
    int frames[MAX_FRAMES];
    int pageFaults = 0;

    for (int i = 0; i < MAX_FRAMES; i++) {
        frames[i] = -1; // Initialize all frames to -1
    }
    for (int i = 0; i < n; i++) {
        int page = pages[i];
        if (!find(page, frames, MAX_FRAMES)) {
            // Find the page that will not be used for the longest time in the future
            int replaceIndex = -1;
            for (int j = 0; j < MAX_FRAMES; j++) {
                int furthestUsed = i; // If a page is not used anymore, it's the furthest
                for (int k = i + 1; k < n; k++) {
                    if (frames[j] == pages[k]) {
                        furthestUsed = k;
                        break;
                    }
                }
                if (replaceIndex == -1 || furthestUsed > i) {
                    replaceIndex = j;
                }
            }
            frames[replaceIndex] = page;
            pageFaults++;
        }
        printf("Page %d: ", page);
        for (int j = 0; j < MAX_FRAMES; j++) {
            printf("%d ", frames[j]);
        }
        printf("\n");
    }

    printf("Total Page Faults (Optimal): %d\n", pageFaults);
}
int main() {

    int pages[] = {1, 3, 0, 3, 5, 6, 3};
    int n = sizeof(pages) / sizeof(pages[0]);

    printf("Optimal Page Replacement Algorithm\n");
    Optimal(pages, n);
    printf("\n");

    return 0;
}
